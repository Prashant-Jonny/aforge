//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:2.0.50727.4927
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AForge.Imaging.ShaderBased.Properties {
    using System;
    
    
    /// <summary>
    ///   Eine stark typisierte Ressourcenklasse zum Suchen von lokalisierten Zeichenfolgen usw.
    /// </summary>
    // Diese Klasse wurde von der StronglyTypedResourceBuilder automatisch generiert
    // -Klasse über ein Tool wie ResGen oder Visual Studio automatisch generiert.
    // Um einen Member hinzuzufügen oder zu entfernen, bearbeiten Sie die .ResX-Datei und führen dann ResGen
    // mit der /str-Option erneut aus, oder Sie erstellen Ihr VS-Projekt neu.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "2.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Gibt die zwischengespeicherte ResourceManager-Instanz zurück, die von dieser Klasse verwendet wird.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("AForge.Imaging.ShaderBased.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Überschreibt die CurrentUICulture-Eigenschaft des aktuellen Threads für alle
        ///   Ressourcenzuordnungen, die diese stark typisierte Ressourcenklasse verwenden.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die float number;
        ///
        ///struct PS_INPUT 
        ///{
        ///   float4 Position : POSITION0;
        ///   float2 Texcoord : TEXCOORD0;   
        ///};
        ///
        ///float4 PixelShaderMain( float2 textureCoordinate : TEXCOORD0 ) : COLOR0
        ///{
        ///   //number = 8.0;
        ///   float4 value;
        ///   float u = 0.0;
        ///   float v = 0.0;
        ///
        ///   u = textureCoordinate.x * number;
        ///   v = textureCoordinate.y * number;
        ///
        ///   if (fmod(u, 2.0) &lt;= 1.0 &amp;&amp; fmod(v, 2.0) &lt;= 1.0 ||
        ///       fmod(u, 2.0) &gt; 1.0 &amp;&amp; fmod(v, 2.0) &gt; 1.0)
        ///      value = float4( 0.0f, 0.0f, 0.0f, 1.0f );
        ///   else   
        ///   [Rest der Zeichenfolge wurde abgeschnitten]&quot;; ähnelt.
        /// </summary>
        internal static string HLSLChessboard {
            get {
                return ResourceManager.GetString("HLSLChessboard", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die texture imageTexture;
        ///
        ///sampler2D imageMap = sampler_state
        ///{
        ///  Texture = (imageTexture);
        ///};
        ///
        ///float4 PixelShaderMain(float2 textureCoordinate : TEXCOORD0) : COLOR0
        ///{
        ///  return 1 - tex2D(imageMap, textureCoordinate);
        ///}
        ///
        ///technique Chessboard
        ///{
        ///  pass Pass_0
        ///  {
        ///    PixelShader = compile ps_2_0 PixelShaderMain();
        ///  }
        ///} ähnelt.
        /// </summary>
        internal static string HLSLInvert {
            get {
                return ResourceManager.GetString("HLSLInvert", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die int width;
        ///int height;
        ///float factor;
        ///texture imageTexture;
        ///
        ///sampler2D imageMap = sampler_state
        ///{
        ///  Texture = (imageTexture);
        ///};
        ///
        ///float4 PixelShaderMain(float2 textureCoordinate : TEXCOORD0) : COLOR0
        ///{
        ///   //float xSize = 512, ySize = 512;
        ///   //int kernelSize = 9;
        ///   float2 delta = float2(1.0f / width, 1.0f / height);
        ///   float2 offset[9] = 
        ///   {
        ///      //first row
        ///      float2(-1.0f,  1.0f), 
        ///      float2( 0.0f,  1.0f),
        ///      float2( 1.0f,  1.0f), 
        ///      //second row
        ///      float2(-1.0f, 0 [Rest der Zeichenfolge wurde abgeschnitten]&quot;; ähnelt.
        /// </summary>
        internal static string HLSLLaplace {
            get {
                return ResourceManager.GetString("HLSLLaplace", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die texture imageTexture;
        ///
        ///sampler2D imageMap = sampler_state
        ///{
        ///  Texture = (imageTexture);
        ///};
        ///
        ///float4 PixelShaderMain(float2 textureCoordinate : TEXCOORD0) : COLOR0
        ///{
        ///  return tex2D(imageMap, textureCoordinate);
        ///}
        ///
        ///technique Chessboard
        ///{
        ///  pass Pass_0
        ///  {
        ///    PixelShader = compile ps_2_0 PixelShaderMain();
        ///  }
        ///} ähnelt.
        /// </summary>
        internal static string HLSLOriginal {
            get {
                return ResourceManager.GetString("HLSLOriginal", resourceCulture);
            }
        }
    }
}
